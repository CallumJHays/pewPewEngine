   1               		.file	"collision.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__floatsisf
  11               	.global	__addsf3
  12               	.global	__subsf3
  13               	.global	__gesf2
  14               		.section	.text.rectangularCollision,"ax",@progbits
  15               	.global	rectangularCollision
  17               	rectangularCollision:
  18               	.LFB4:
  19               		.file 1 "collision.c"
   1:collision.c   **** // pewPewEngine/collision.c
   2:collision.c   **** #include <stdint.h>
   3:collision.c   **** #include <stdlib.h>
   4:collision.c   **** #include <string.h>
   5:collision.c   **** #include <math.h>
   6:collision.c   **** #include "sprite.h"
   7:collision.c   **** #include "pewPewEngine.h"
   8:collision.c   **** #include "collision.h"
   9:collision.c   **** 
  10:collision.c   **** GameObject* objectCollidingWithType(char* type, bool roundVals, GameObject* obj, bool thisObjCircul
  11:collision.c   **** 	// loop through game objects
  12:collision.c   **** 	// a firstObject should exist
  13:collision.c   **** 	if(game->firstObject != NULL){
  14:collision.c   **** 		GameObject* objTesting = game->firstObject;
  15:collision.c   **** 		do{
  16:collision.c   **** 			// if object is of correct type
  17:collision.c   **** 			if(strcmp(objTesting->type, type)){
  18:collision.c   **** 				// if objects are colliding, return pointer to object colliding with.
  19:collision.c   **** 				if(objectsColliding(true, obj, thisObjCircular, objTesting, objTypeCircular)){
  20:collision.c   **** 					return objTesting;
  21:collision.c   **** 				}
  22:collision.c   **** 			}
  23:collision.c   **** 		} while(obj->nextObject != NULL);
  24:collision.c   **** 	}
  25:collision.c   **** 
  26:collision.c   **** 	// if that failed, return NULL.
  27:collision.c   **** 	return NULL;
  28:collision.c   **** }
  29:collision.c   **** 
  30:collision.c   **** bool objectsColliding(bool roundVals, GameObject* obj1, bool sp1Circular, GameObject* obj2, bool sp
  31:collision.c   **** 	float x1 = obj1->sprite->x;
  32:collision.c   **** 	float y1 = obj1->sprite->y;
  33:collision.c   **** 	float x2 = obj2->sprite->x;
  34:collision.c   **** 	float y2 = obj2->sprite->y;
  35:collision.c   **** 	if(roundVals){
  36:collision.c   **** 		x1 = floor(x1 + 0.5);
  37:collision.c   **** 		y1 = floor(y1 + 0.5);
  38:collision.c   **** 		x2 = floor(x2 + 0.5);
  39:collision.c   **** 		y2 = floor(y2 + 0.5);
  40:collision.c   **** 	}
  41:collision.c   **** 	// if both sprites collision have circular hitboxes
  42:collision.c   **** 	if(sp1Circular && sp2Circular){
  43:collision.c   **** 		return circularCollision(x1, y1, obj1->sprite->width / 2.0f, x2, y2, obj2->sprite->width / 2.0f);
  44:collision.c   **** 	}
  45:collision.c   **** 	// else if both sprites collision have rectangular hitboxes
  46:collision.c   **** 	else if(!sp1Circular & !sp2Circular){
  47:collision.c   **** 		return rectangularCollision(x1, y1, obj1->sprite->width, obj1->sprite->height,
  48:collision.c   **** 									x2, y2, obj2->sprite->width, obj2->sprite->height);
  49:collision.c   **** 	}
  50:collision.c   **** 	// else one must be rectangular and one must be circular
  51:collision.c   **** 	else{
  52:collision.c   **** 		// if object 2 is circular, swap sprite 2 and sprite 1.
  53:collision.c   **** 		if(sp2Circular){
  54:collision.c   **** 			GameObject* swapTemp = obj2;
  55:collision.c   **** 			obj2 = obj1;
  56:collision.c   **** 			obj1 = swapTemp;
  57:collision.c   **** 		}
  58:collision.c   **** 		// return the correct result
  59:collision.c   **** 		return circularRectCollision(x1, y1, obj1->sprite->width / 2.0f, 
  60:collision.c   **** 									 x2, y2, obj2->sprite->width, obj2->sprite->height);
  61:collision.c   **** 	}
  62:collision.c   **** }
  63:collision.c   **** 
  64:collision.c   **** bool rectangularCollision(float x1, float y1, int w1, int h1, float x2, float y2, int w2, int h2){
  20               		.loc 1 64 0
  21               		.cfi_startproc
  22               	.LVL0:
  23 0000 4F92      		push r4
  24               	.LCFI0:
  25               		.cfi_def_cfa_offset 3
  26               		.cfi_offset 4, -2
  27 0002 5F92      		push r5
  28               	.LCFI1:
  29               		.cfi_def_cfa_offset 4
  30               		.cfi_offset 5, -3
  31 0004 6F92      		push r6
  32               	.LCFI2:
  33               		.cfi_def_cfa_offset 5
  34               		.cfi_offset 6, -4
  35 0006 7F92      		push r7
  36               	.LCFI3:
  37               		.cfi_def_cfa_offset 6
  38               		.cfi_offset 7, -5
  39 0008 AF92      		push r10
  40               	.LCFI4:
  41               		.cfi_def_cfa_offset 7
  42               		.cfi_offset 10, -6
  43 000a BF92      		push r11
  44               	.LCFI5:
  45               		.cfi_def_cfa_offset 8
  46               		.cfi_offset 11, -7
  47 000c CF92      		push r12
  48               	.LCFI6:
  49               		.cfi_def_cfa_offset 9
  50               		.cfi_offset 12, -8
  51 000e DF92      		push r13
  52               	.LCFI7:
  53               		.cfi_def_cfa_offset 10
  54               		.cfi_offset 13, -9
  55 0010 EF92      		push r14
  56               	.LCFI8:
  57               		.cfi_def_cfa_offset 11
  58               		.cfi_offset 14, -10
  59 0012 FF92      		push r15
  60               	.LCFI9:
  61               		.cfi_def_cfa_offset 12
  62               		.cfi_offset 15, -11
  63 0014 0F93      		push r16
  64               	.LCFI10:
  65               		.cfi_def_cfa_offset 13
  66               		.cfi_offset 16, -12
  67 0016 1F93      		push r17
  68               	.LCFI11:
  69               		.cfi_def_cfa_offset 14
  70               		.cfi_offset 17, -13
  71 0018 CF93      		push r28
  72               	.LCFI12:
  73               		.cfi_def_cfa_offset 15
  74               		.cfi_offset 28, -14
  75 001a DF93      		push r29
  76               	.LCFI13:
  77               		.cfi_def_cfa_offset 16
  78               		.cfi_offset 29, -15
  79 001c 00D0      		rcall .
  80 001e 00D0      		rcall .
  81               	.LCFI14:
  82               		.cfi_def_cfa_offset 20
  83 0020 CDB7      		in r28,__SP_L__
  84 0022 DEB7      		in r29,__SP_H__
  85               	.LCFI15:
  86               		.cfi_def_cfa_register 28
  87               	/* prologue: function */
  88               	/* frame size = 4 */
  89               	/* stack size = 18 */
  90               	.L__stack_usage = 18
  91 0024 6983      		std Y+1,r22
  92 0026 7A83      		std Y+2,r23
  93 0028 8B83      		std Y+3,r24
  94 002a 9C83      		std Y+4,r25
  95 002c 2901      		movw r4,r18
  96 002e 3A01      		movw r6,r20
  65:collision.c   **** 	return x1 + w1 - 1 >= x2
  97               		.loc 1 65 0
  98 0030 B801      		movw r22,r16
  99 0032 8827      		clr r24
 100 0034 77FD      		sbrc r23,7
 101 0036 8095      		com r24
 102 0038 982F      		mov r25,r24
 103               	.LVL1:
 104 003a 0E94 0000 		call __floatsisf
 105               	.LVL2:
 106 003e 9B01      		movw r18,r22
 107 0040 AC01      		movw r20,r24
 108 0042 6981      		ldd r22,Y+1
 109 0044 7A81      		ldd r23,Y+2
 110 0046 8B81      		ldd r24,Y+3
 111 0048 9C81      		ldd r25,Y+4
 112 004a 0E94 0000 		call __addsf3
 113               	.LVL3:
 114 004e 20E0      		ldi r18,0
 115 0050 30E0      		ldi r19,0
 116 0052 40E8      		ldi r20,lo8(-128)
 117 0054 5FE3      		ldi r21,lo8(63)
 118 0056 0E94 0000 		call __subsf3
 119               	.LVL4:
  66:collision.c   **** 		&& y1 + h1 - 1 >= y2
  67:collision.c   **** 		&& x2 + w2 - 1 >= x1
  68:collision.c   **** 		&& y2 + h2 - 1 >= y1;
 120               		.loc 1 68 0
 121 005a A601      		movw r20,r12
 122 005c 9501      		movw r18,r10
 123 005e 0E94 0000 		call __gesf2
 124               	.LVL5:
 125 0062 87FD      		sbrc r24,7
 126 0064 00C0      		rjmp .L15
  66:collision.c   **** 		&& y1 + h1 - 1 >= y2
 127               		.loc 1 66 0
 128 0066 B701      		movw r22,r14
 129 0068 8827      		clr r24
 130 006a 77FD      		sbrc r23,7
 131 006c 8095      		com r24
 132 006e 982F      		mov r25,r24
 133 0070 0E94 0000 		call __floatsisf
 134               	.LVL6:
 135 0074 9B01      		movw r18,r22
 136 0076 AC01      		movw r20,r24
 137 0078 C301      		movw r24,r6
 138 007a B201      		movw r22,r4
 139 007c 0E94 0000 		call __addsf3
 140               	.LVL7:
 141 0080 20E0      		ldi r18,0
 142 0082 30E0      		ldi r19,0
 143 0084 40E8      		ldi r20,lo8(-128)
 144 0086 5FE3      		ldi r21,lo8(63)
 145 0088 0E94 0000 		call __subsf3
 146               	.LVL8:
 147 008c 2D89      		ldd r18,Y+21
 148 008e 3E89      		ldd r19,Y+22
 149 0090 4F89      		ldd r20,Y+23
 150 0092 588D      		ldd r21,Y+24
 151 0094 0E94 0000 		call __gesf2
 152               	.LVL9:
 153 0098 87FD      		sbrc r24,7
 154 009a 00C0      		rjmp .L15
  67:collision.c   **** 		&& x2 + w2 - 1 >= x1
 155               		.loc 1 67 0
 156 009c 698D      		ldd r22,Y+25
 157 009e 7A8D      		ldd r23,Y+26
 158 00a0 8827      		clr r24
 159 00a2 77FD      		sbrc r23,7
 160 00a4 8095      		com r24
 161 00a6 982F      		mov r25,r24
 162 00a8 0E94 0000 		call __floatsisf
 163               	.LVL10:
 164 00ac 9B01      		movw r18,r22
 165 00ae AC01      		movw r20,r24
 166 00b0 C601      		movw r24,r12
 167 00b2 B501      		movw r22,r10
 168 00b4 0E94 0000 		call __addsf3
 169               	.LVL11:
 170 00b8 20E0      		ldi r18,0
 171 00ba 30E0      		ldi r19,0
 172 00bc 40E8      		ldi r20,lo8(-128)
 173 00be 5FE3      		ldi r21,lo8(63)
 174 00c0 0E94 0000 		call __subsf3
 175               	.LVL12:
 176 00c4 2981      		ldd r18,Y+1
 177 00c6 3A81      		ldd r19,Y+2
 178 00c8 4B81      		ldd r20,Y+3
 179 00ca 5C81      		ldd r21,Y+4
 180 00cc 0E94 0000 		call __gesf2
 181               	.LVL13:
 182 00d0 87FD      		sbrc r24,7
 183 00d2 00C0      		rjmp .L15
 184               		.loc 1 68 0
 185 00d4 6B8D      		ldd r22,Y+27
 186 00d6 7C8D      		ldd r23,Y+28
 187 00d8 8827      		clr r24
 188 00da 77FD      		sbrc r23,7
 189 00dc 8095      		com r24
 190 00de 982F      		mov r25,r24
 191 00e0 0E94 0000 		call __floatsisf
 192               	.LVL14:
 193 00e4 9B01      		movw r18,r22
 194 00e6 AC01      		movw r20,r24
 195 00e8 6D89      		ldd r22,Y+21
 196 00ea 7E89      		ldd r23,Y+22
 197 00ec 8F89      		ldd r24,Y+23
 198 00ee 988D      		ldd r25,Y+24
 199 00f0 0E94 0000 		call __addsf3
 200               	.LVL15:
 201 00f4 20E0      		ldi r18,0
 202 00f6 30E0      		ldi r19,0
 203 00f8 40E8      		ldi r20,lo8(-128)
 204 00fa 5FE3      		ldi r21,lo8(63)
 205 00fc 0E94 0000 		call __subsf3
 206               	.LVL16:
 207 0100 11E0      		ldi r17,lo8(1)
 208 0102 A301      		movw r20,r6
 209 0104 9201      		movw r18,r4
 210 0106 0E94 0000 		call __gesf2
 211               	.LVL17:
 212 010a 87FD      		sbrc r24,7
 213 010c 10E0      		ldi r17,0
 214               	.L6:
 215 010e 812F      		mov r24,r17
 216 0110 00C0      		rjmp .L2
 217               	.L15:
 218 0112 80E0      		ldi r24,0
 219               	.L2:
 220               	/* epilogue start */
  69:collision.c   **** }
 221               		.loc 1 69 0
 222 0114 0F90      		pop __tmp_reg__
 223 0116 0F90      		pop __tmp_reg__
 224 0118 0F90      		pop __tmp_reg__
 225 011a 0F90      		pop __tmp_reg__
 226 011c DF91      		pop r29
 227 011e CF91      		pop r28
 228 0120 1F91      		pop r17
 229 0122 0F91      		pop r16
 230               	.LVL18:
 231 0124 FF90      		pop r15
 232 0126 EF90      		pop r14
 233               	.LVL19:
 234 0128 DF90      		pop r13
 235 012a CF90      		pop r12
 236 012c BF90      		pop r11
 237 012e AF90      		pop r10
 238               	.LVL20:
 239 0130 7F90      		pop r7
 240 0132 6F90      		pop r6
 241 0134 5F90      		pop r5
 242 0136 4F90      		pop r4
 243               	.LVL21:
 244 0138 0895      		ret
 245               		.cfi_endproc
 246               	.LFE4:
 248               	.global	__mulsf3
 249               	.global	__lesf2
 250               		.section	.text.circularCollision,"ax",@progbits
 251               	.global	circularCollision
 253               	circularCollision:
 254               	.LFB5:
  70:collision.c   **** 
  71:collision.c   **** bool circularCollision(float x1, float y1, float rad1, float x2, float y2, float rad2){
 255               		.loc 1 71 0
 256               		.cfi_startproc
 257               	.LVL22:
 258 0000 4F92      		push r4
 259               	.LCFI16:
 260               		.cfi_def_cfa_offset 3
 261               		.cfi_offset 4, -2
 262 0002 5F92      		push r5
 263               	.LCFI17:
 264               		.cfi_def_cfa_offset 4
 265               		.cfi_offset 5, -3
 266 0004 6F92      		push r6
 267               	.LCFI18:
 268               		.cfi_def_cfa_offset 5
 269               		.cfi_offset 6, -4
 270 0006 7F92      		push r7
 271               	.LCFI19:
 272               		.cfi_def_cfa_offset 6
 273               		.cfi_offset 7, -5
 274 0008 8F92      		push r8
 275               	.LCFI20:
 276               		.cfi_def_cfa_offset 7
 277               		.cfi_offset 8, -6
 278 000a 9F92      		push r9
 279               	.LCFI21:
 280               		.cfi_def_cfa_offset 8
 281               		.cfi_offset 9, -7
 282 000c AF92      		push r10
 283               	.LCFI22:
 284               		.cfi_def_cfa_offset 9
 285               		.cfi_offset 10, -8
 286 000e BF92      		push r11
 287               	.LCFI23:
 288               		.cfi_def_cfa_offset 10
 289               		.cfi_offset 11, -9
 290 0010 CF92      		push r12
 291               	.LCFI24:
 292               		.cfi_def_cfa_offset 11
 293               		.cfi_offset 12, -10
 294 0012 DF92      		push r13
 295               	.LCFI25:
 296               		.cfi_def_cfa_offset 12
 297               		.cfi_offset 13, -11
 298 0014 EF92      		push r14
 299               	.LCFI26:
 300               		.cfi_def_cfa_offset 13
 301               		.cfi_offset 14, -12
 302 0016 FF92      		push r15
 303               	.LCFI27:
 304               		.cfi_def_cfa_offset 14
 305               		.cfi_offset 15, -13
 306 0018 0F93      		push r16
 307               	.LCFI28:
 308               		.cfi_def_cfa_offset 15
 309               		.cfi_offset 16, -14
 310 001a 1F93      		push r17
 311               	.LCFI29:
 312               		.cfi_def_cfa_offset 16
 313               		.cfi_offset 17, -15
 314 001c CF93      		push r28
 315               	.LCFI30:
 316               		.cfi_def_cfa_offset 17
 317               		.cfi_offset 28, -16
 318 001e DF93      		push r29
 319               	.LCFI31:
 320               		.cfi_def_cfa_offset 18
 321               		.cfi_offset 29, -17
 322 0020 00D0      		rcall .
 323 0022 00D0      		rcall .
 324               	.LCFI32:
 325               		.cfi_def_cfa_offset 22
 326 0024 CDB7      		in r28,__SP_L__
 327 0026 DEB7      		in r29,__SP_H__
 328               	.LCFI33:
 329               		.cfi_def_cfa_register 28
 330               	/* prologue: function */
 331               	/* frame size = 4 */
 332               	/* stack size = 20 */
 333               	.L__stack_usage = 20
 334 0028 2983      		std Y+1,r18
 335 002a 3A83      		std Y+2,r19
 336 002c 4B83      		std Y+3,r20
 337 002e 5C83      		std Y+4,r21
 338 0030 2701      		movw r4,r14
 339 0032 3801      		movw r6,r16
 340 0034 A601      		movw r20,r12
 341 0036 9501      		movw r18,r10
 342               	.LVL23:
  72:collision.c   **** 	return pow(x1 - x2, 2) + pow(y1 - y2, 2) <= pow(rad1, 2) + pow(rad2, 2);
 343               		.loc 1 72 0
 344 0038 0E94 0000 		call __subsf3
 345               	.LVL24:
 346 003c 6B01      		movw r12,r22
 347 003e 7C01      		movw r14,r24
 348 0040 2F89      		ldd r18,Y+23
 349 0042 388D      		ldd r19,Y+24
 350 0044 498D      		ldd r20,Y+25
 351 0046 5A8D      		ldd r21,Y+26
 352 0048 6981      		ldd r22,Y+1
 353 004a 7A81      		ldd r23,Y+2
 354 004c 8B81      		ldd r24,Y+3
 355 004e 9C81      		ldd r25,Y+4
 356 0050 0E94 0000 		call __subsf3
 357               	.LVL25:
 358 0054 4B01      		movw r8,r22
 359 0056 5C01      		movw r10,r24
 360 0058 A701      		movw r20,r14
 361 005a 9601      		movw r18,r12
 362 005c C701      		movw r24,r14
 363 005e B601      		movw r22,r12
 364 0060 0E94 0000 		call __mulsf3
 365               	.LVL26:
 366 0064 6B01      		movw r12,r22
 367 0066 7C01      		movw r14,r24
 368 0068 A501      		movw r20,r10
 369 006a 9401      		movw r18,r8
 370 006c C501      		movw r24,r10
 371 006e B401      		movw r22,r8
 372 0070 0E94 0000 		call __mulsf3
 373               	.LVL27:
 374 0074 9B01      		movw r18,r22
 375 0076 AC01      		movw r20,r24
 376 0078 C701      		movw r24,r14
 377 007a B601      		movw r22,r12
 378 007c 0E94 0000 		call __addsf3
 379               	.LVL28:
 380 0080 6B01      		movw r12,r22
 381 0082 7C01      		movw r14,r24
 382 0084 A301      		movw r20,r6
 383 0086 9201      		movw r18,r4
 384 0088 C301      		movw r24,r6
 385 008a B201      		movw r22,r4
 386 008c 0E94 0000 		call __mulsf3
 387               	.LVL29:
 388 0090 4B01      		movw r8,r22
 389 0092 5C01      		movw r10,r24
 390 0094 2B8D      		ldd r18,Y+27
 391 0096 3C8D      		ldd r19,Y+28
 392 0098 4D8D      		ldd r20,Y+29
 393 009a 5E8D      		ldd r21,Y+30
 394 009c CA01      		movw r24,r20
 395 009e B901      		movw r22,r18
 396 00a0 0E94 0000 		call __mulsf3
 397               	.LVL30:
 398 00a4 9B01      		movw r18,r22
 399 00a6 AC01      		movw r20,r24
 400 00a8 C501      		movw r24,r10
 401 00aa B401      		movw r22,r8
 402 00ac 0E94 0000 		call __addsf3
 403               	.LVL31:
 404 00b0 9B01      		movw r18,r22
 405 00b2 AC01      		movw r20,r24
 406 00b4 11E0      		ldi r17,lo8(1)
 407 00b6 C701      		movw r24,r14
 408 00b8 B601      		movw r22,r12
 409 00ba 0E94 0000 		call __lesf2
 410               	.LVL32:
 411 00be 1816      		cp __zero_reg__,r24
 412 00c0 04F4      		brge .L18
 413 00c2 10E0      		ldi r17,0
 414               	.L18:
  73:collision.c   **** }
 415               		.loc 1 73 0
 416 00c4 812F      		mov r24,r17
 417               	/* epilogue start */
 418 00c6 0F90      		pop __tmp_reg__
 419 00c8 0F90      		pop __tmp_reg__
 420 00ca 0F90      		pop __tmp_reg__
 421 00cc 0F90      		pop __tmp_reg__
 422 00ce DF91      		pop r29
 423 00d0 CF91      		pop r28
 424 00d2 1F91      		pop r17
 425 00d4 0F91      		pop r16
 426 00d6 FF90      		pop r15
 427 00d8 EF90      		pop r14
 428               	.LVL33:
 429 00da DF90      		pop r13
 430 00dc CF90      		pop r12
 431 00de BF90      		pop r11
 432 00e0 AF90      		pop r10
 433               	.LVL34:
 434 00e2 9F90      		pop r9
 435 00e4 8F90      		pop r8
 436 00e6 7F90      		pop r7
 437 00e8 6F90      		pop r6
 438 00ea 5F90      		pop r5
 439 00ec 4F90      		pop r4
 440               	.LVL35:
 441 00ee 0895      		ret
 442               		.cfi_endproc
 443               	.LFE5:
 445               	.global	__ltsf2
 446               	.global	__divsf3
 447               		.section	.text.lineIntersectingCircle,"ax",@progbits
 448               	.global	lineIntersectingCircle
 450               	lineIntersectingCircle:
 451               	.LFB7:
  74:collision.c   **** 
  75:collision.c   **** bool circularRectCollision(float x1, float y1, float rad1, float x2, float y2, int w2, int h2){
  76:collision.c   **** 	// if the center of the circle is within the rectangle
  77:collision.c   **** 	// we can reuse circular collision code for this
  78:collision.c   **** 	if(circularCollision(x1, y1, rad1, x2 + w2, y2 + h2, 0)){
  79:collision.c   **** 		return true;
  80:collision.c   **** 	}
  81:collision.c   **** 	// or if any edge on the rectangle intersects with the circle
  82:collision.c   **** 	else{
  83:collision.c   **** 		return lineIntersectingCircle(x2, y2, x2 + w2, y2, x1, y1, rad1)
  84:collision.c   **** 			|| lineIntersectingCircle(x2 + w2, y2, x2 + w2, y2 + h2, x1, y1, rad1)
  85:collision.c   **** 			|| lineIntersectingCircle(x2, y2, x2, y2 + h2, x1, y1, rad1)
  86:collision.c   **** 			|| lineIntersectingCircle(x2, y2 + h2, x2 + w2, y2 + h2, x1, y1, rad1);
  87:collision.c   **** 	}
  88:collision.c   **** }
  89:collision.c   **** 
  90:collision.c   **** bool lineIntersectingCircle(float x1, float y1, float x2, float y2, float circlex, float circley, f
 452               		.loc 1 90 0
 453               		.cfi_startproc
 454               	.LVL36:
 455 0000 2F92      		push r2
 456               	.LCFI34:
 457               		.cfi_def_cfa_offset 3
 458               		.cfi_offset 2, -2
 459 0002 3F92      		push r3
 460               	.LCFI35:
 461               		.cfi_def_cfa_offset 4
 462               		.cfi_offset 3, -3
 463 0004 4F92      		push r4
 464               	.LCFI36:
 465               		.cfi_def_cfa_offset 5
 466               		.cfi_offset 4, -4
 467 0006 5F92      		push r5
 468               	.LCFI37:
 469               		.cfi_def_cfa_offset 6
 470               		.cfi_offset 5, -5
 471 0008 6F92      		push r6
 472               	.LCFI38:
 473               		.cfi_def_cfa_offset 7
 474               		.cfi_offset 6, -6
 475 000a 7F92      		push r7
 476               	.LCFI39:
 477               		.cfi_def_cfa_offset 8
 478               		.cfi_offset 7, -7
 479 000c 8F92      		push r8
 480               	.LCFI40:
 481               		.cfi_def_cfa_offset 9
 482               		.cfi_offset 8, -8
 483 000e 9F92      		push r9
 484               	.LCFI41:
 485               		.cfi_def_cfa_offset 10
 486               		.cfi_offset 9, -9
 487 0010 AF92      		push r10
 488               	.LCFI42:
 489               		.cfi_def_cfa_offset 11
 490               		.cfi_offset 10, -10
 491 0012 BF92      		push r11
 492               	.LCFI43:
 493               		.cfi_def_cfa_offset 12
 494               		.cfi_offset 11, -11
 495 0014 CF92      		push r12
 496               	.LCFI44:
 497               		.cfi_def_cfa_offset 13
 498               		.cfi_offset 12, -12
 499 0016 DF92      		push r13
 500               	.LCFI45:
 501               		.cfi_def_cfa_offset 14
 502               		.cfi_offset 13, -13
 503 0018 EF92      		push r14
 504               	.LCFI46:
 505               		.cfi_def_cfa_offset 15
 506               		.cfi_offset 14, -14
 507 001a FF92      		push r15
 508               	.LCFI47:
 509               		.cfi_def_cfa_offset 16
 510               		.cfi_offset 15, -15
 511 001c 0F93      		push r16
 512               	.LCFI48:
 513               		.cfi_def_cfa_offset 17
 514               		.cfi_offset 16, -16
 515 001e 1F93      		push r17
 516               	.LCFI49:
 517               		.cfi_def_cfa_offset 18
 518               		.cfi_offset 17, -17
 519 0020 CF93      		push r28
 520               	.LCFI50:
 521               		.cfi_def_cfa_offset 19
 522               		.cfi_offset 28, -18
 523 0022 DF93      		push r29
 524               	.LCFI51:
 525               		.cfi_def_cfa_offset 20
 526               		.cfi_offset 29, -19
 527 0024 CDB7      		in r28,__SP_L__
 528 0026 DEB7      		in r29,__SP_H__
 529               	.LCFI52:
 530               		.cfi_def_cfa_register 28
 531 0028 6297      		sbiw r28,18
 532               	.LCFI53:
 533               		.cfi_def_cfa_offset 38
 534 002a 0FB6      		in __tmp_reg__,__SREG__
 535 002c F894      		cli
 536 002e DEBF      		out __SP_H__,r29
 537 0030 0FBE      		out __SREG__,__tmp_reg__
 538 0032 CDBF      		out __SP_L__,r28
 539               	/* prologue: function */
 540               	/* frame size = 18 */
 541               	/* stack size = 36 */
 542               	.L__stack_usage = 36
 543 0034 362E      		mov r3,r22
 544 0036 272E      		mov r2,r23
 545 0038 8983      		std Y+1,r24
 546 003a 9A83      		std Y+2,r25
 547 003c 2B83      		std Y+3,r18
 548 003e 3C83      		std Y+4,r19
 549 0040 4D83      		std Y+5,r20
 550 0042 5E83      		std Y+6,r21
 551 0044 AF82      		std Y+7,r10
 552 0046 B886      		std Y+8,r11
 553 0048 C986      		std Y+9,r12
 554 004a DA86      		std Y+10,r13
  91:collision.c   **** 	// make sure that x1 < x2
  92:collision.c   **** 	if(x2 < x1){
 555               		.loc 1 92 0
 556 004c 262F      		mov r18,r22
 557               	.LVL37:
 558 004e 372F      		mov r19,r23
 559 0050 AC01      		movw r20,r24
 560 0052 B701      		movw r22,r14
 561               	.LVL38:
 562 0054 C801      		movw r24,r16
 563 0056 0E94 0000 		call __ltsf2
 564               	.LVL39:
 565 005a 87FF      		sbrs r24,7
 566 005c 00C0      		rjmp .L20
 567 005e 3B81      		ldd r19,Y+3
 568 0060 2C81      		ldd r18,Y+4
 569 0062 9D81      		ldd r25,Y+5
 570 0064 8E81      		ldd r24,Y+6
 571               	.LBB2:
  93:collision.c   **** 		float swapTemp = x2;
  94:collision.c   **** 		x2 = x1;
  95:collision.c   **** 		x1 = swapTemp;
  96:collision.c   **** 		swapTemp = y2;
  97:collision.c   **** 		y2 = y1;
  98:collision.c   **** 		y1 = swapTemp;
 572               		.loc 1 98 0
 573 0066 AB82      		std Y+3,r10
 574 0068 BC82      		std Y+4,r11
 575 006a CD82      		std Y+5,r12
 576 006c DE82      		std Y+6,r13
  97:collision.c   **** 		y2 = y1;
 577               		.loc 1 97 0
 578 006e 3F83      		std Y+7,r19
 579 0070 2887      		std Y+8,r18
 580 0072 9987      		std Y+9,r25
 581 0074 8A87      		std Y+10,r24
 582               	.LBE2:
 583 0076 9101      		movw r18,r2
 584 0078 9981      		ldd r25,Y+1
 585 007a 8A81      		ldd r24,Y+2
 586               	.LBB3:
  95:collision.c   **** 		x1 = swapTemp;
 587               		.loc 1 95 0
 588 007c 3E2C      		mov r3,r14
 589 007e 2F2C      		mov r2,r15
 590 0080 0983      		std Y+1,r16
 591 0082 1A83      		std Y+2,r17
  94:collision.c   **** 		x2 = x1;
 592               		.loc 1 94 0
 593 0084 E32E      		mov r14,r19
 594               	.LVL40:
 595 0086 F22E      		mov r15,r18
 596 0088 092F      		mov r16,r25
 597 008a 182F      		mov r17,r24
 598               	.L20:
 599               	.LVL41:
 600               	.LBE3:
  99:collision.c   **** 	}
 100:collision.c   **** 
 101:collision.c   **** 	// define line mathematically
 102:collision.c   **** 	// y = gradient * x + offset;
 103:collision.c   **** 	float gradient = (y2 - y1) / (x2 - x1);
 601               		.loc 1 103 0
 602 008c 7B81      		ldd r23,Y+3
 603 008e 6C81      		ldd r22,Y+4
 604 0090 9D81      		ldd r25,Y+5
 605 0092 8E81      		ldd r24,Y+6
 606 0094 272F      		mov r18,r23
 607 0096 362F      		mov r19,r22
 608 0098 492F      		mov r20,r25
 609 009a 582F      		mov r21,r24
 610 009c BF81      		ldd r27,Y+7
 611 009e A885      		ldd r26,Y+8
 612 00a0 F985      		ldd r31,Y+9
 613 00a2 EA85      		ldd r30,Y+10
 614 00a4 6B2F      		mov r22,r27
 615 00a6 7A2F      		mov r23,r26
 616 00a8 8F2F      		mov r24,r31
 617 00aa 9E2F      		mov r25,r30
 618 00ac 0E94 0000 		call __subsf3
 619               	.LVL42:
 620 00b0 4B01      		movw r8,r22
 621 00b2 5C01      		movw r10,r24
 622 00b4 232D      		mov r18,r3
 623 00b6 322D      		mov r19,r2
 624 00b8 4981      		ldd r20,Y+1
 625 00ba 5A81      		ldd r21,Y+2
 626 00bc B701      		movw r22,r14
 627 00be C801      		movw r24,r16
 628 00c0 0E94 0000 		call __subsf3
 629               	.LVL43:
 630 00c4 9B01      		movw r18,r22
 631 00c6 AC01      		movw r20,r24
 632 00c8 C501      		movw r24,r10
 633 00ca B401      		movw r22,r8
 634 00cc 0E94 0000 		call __divsf3
 635               	.LVL44:
 636 00d0 4B01      		movw r8,r22
 637 00d2 5C01      		movw r10,r24
 638               	.LVL45:
 104:collision.c   **** 	float offset = y1 - gradient * x1;
 105:collision.c   **** 
 106:collision.c   **** 	// construct projection line that passes through circle center and is perpendicular to the line
 107:collision.c   **** 	// y = projectionGradient * x + projectionOffset
 108:collision.c   **** 	float projectionGradient = -1 / gradient; 
 639               		.loc 1 108 0
 640 00d4 9B01      		movw r18,r22
 641 00d6 AC01      		movw r20,r24
 642 00d8 60E0      		ldi r22,0
 643 00da 70E0      		ldi r23,0
 644 00dc 80E8      		ldi r24,lo8(-128)
 645 00de 9FEB      		ldi r25,lo8(-65)
 646 00e0 0E94 0000 		call __divsf3
 647               	.LVL46:
 648 00e4 2B01      		movw r4,r22
 649 00e6 3C01      		movw r6,r24
 650               	.LVL47:
 109:collision.c   **** 	float projectionOffset = circley - projectionGradient * circlex;
 651               		.loc 1 109 0
 652 00e8 2FA1      		ldd r18,Y+39
 653 00ea 38A5      		ldd r19,Y+40
 654 00ec 49A5      		ldd r20,Y+41
 655 00ee 5AA5      		ldd r21,Y+42
 656 00f0 0E94 0000 		call __mulsf3
 657               	.LVL48:
 658 00f4 9B01      		movw r18,r22
 659 00f6 AC01      		movw r20,r24
 660 00f8 6BA5      		ldd r22,Y+43
 661 00fa 7CA5      		ldd r23,Y+44
 662 00fc 8DA5      		ldd r24,Y+45
 663 00fe 9EA5      		ldd r25,Y+46
 664 0100 0E94 0000 		call __subsf3
 665               	.LVL49:
 666 0104 6B87      		std Y+11,r22
 667 0106 7C87      		std Y+12,r23
 668 0108 8D87      		std Y+13,r24
 669 010a 9E87      		std Y+14,r25
 670               	.LVL50:
 104:collision.c   **** 	float offset = y1 - gradient * x1;
 671               		.loc 1 104 0
 672 010c 232D      		mov r18,r3
 673 010e 322D      		mov r19,r2
 674 0110 4981      		ldd r20,Y+1
 675 0112 5A81      		ldd r21,Y+2
 676 0114 C501      		movw r24,r10
 677 0116 B401      		movw r22,r8
 678               	.LVL51:
 679 0118 0E94 0000 		call __mulsf3
 680               	.LVL52:
 681 011c 9B01      		movw r18,r22
 682 011e AC01      		movw r20,r24
 683 0120 BB81      		ldd r27,Y+3
 684 0122 AC81      		ldd r26,Y+4
 685 0124 FD81      		ldd r31,Y+5
 686 0126 EE81      		ldd r30,Y+6
 687 0128 6B2F      		mov r22,r27
 688 012a 7A2F      		mov r23,r26
 689 012c 8F2F      		mov r24,r31
 690 012e 9E2F      		mov r25,r30
 691 0130 0E94 0000 		call __subsf3
 692               	.LVL53:
 693 0134 9B01      		movw r18,r22
 694 0136 AC01      		movw r20,r24
 110:collision.c   **** 
 111:collision.c   **** 	// point of intersection
 112:collision.c   **** 	float intersectX = (projectionOffset - offset) / (gradient - projectionGradient);
 695               		.loc 1 112 0
 696 0138 6B85      		ldd r22,Y+11
 697 013a 7C85      		ldd r23,Y+12
 698 013c 8D85      		ldd r24,Y+13
 699 013e 9E85      		ldd r25,Y+14
 700 0140 0E94 0000 		call __subsf3
 701               	.LVL54:
 702 0144 6F87      		std Y+15,r22
 703 0146 788B      		std Y+16,r23
 704 0148 898B      		std Y+17,r24
 705 014a 9A8B      		std Y+18,r25
 706 014c A301      		movw r20,r6
 707 014e 9201      		movw r18,r4
 708 0150 C501      		movw r24,r10
 709 0152 B401      		movw r22,r8
 710 0154 0E94 0000 		call __subsf3
 711               	.LVL55:
 712 0158 9B01      		movw r18,r22
 713 015a AC01      		movw r20,r24
 714 015c 6F85      		ldd r22,Y+15
 715 015e 7889      		ldd r23,Y+16
 716 0160 8989      		ldd r24,Y+17
 717 0162 9A89      		ldd r25,Y+18
 718 0164 0E94 0000 		call __divsf3
 719               	.LVL56:
 720 0168 5B01      		movw r10,r22
 721 016a 6C01      		movw r12,r24
 722               	.LVL57:
 113:collision.c   **** 	float intersectY = projectionGradient * intersectX + projectionOffset;
 114:collision.c   **** 
 115:collision.c   **** 	if(intersectX <= x1){
 723               		.loc 1 115 0
 724 016c 232D      		mov r18,r3
 725 016e 322D      		mov r19,r2
 726 0170 4981      		ldd r20,Y+1
 727 0172 5A81      		ldd r21,Y+2
 728 0174 0E94 0000 		call __lesf2
 729               	.LVL58:
 730 0178 1816      		cp __zero_reg__,r24
 731 017a 04F0      		brlt .L29
 116:collision.c   **** 		return circularCollision(circlex, circley, radius, x1, y1, 0);
 732               		.loc 1 116 0
 733 017c 1F92      		push __zero_reg__
 734 017e 1F92      		push __zero_reg__
 735 0180 1F92      		push __zero_reg__
 736 0182 1F92      		push __zero_reg__
 737 0184 2E81      		ldd r18,Y+6
 738 0186 2F93      		push r18
 739 0188 3D81      		ldd r19,Y+5
 740 018a 3F93      		push r19
 741 018c 4C81      		ldd r20,Y+4
 742 018e 4F93      		push r20
 743 0190 8B81      		ldd r24,Y+3
 744 0192 8F93      		push r24
 745 0194 A32C      		mov r10,r3
 746               	.LVL59:
 747 0196 B22C      		mov r11,r2
 748 0198 C980      		ldd r12,Y+1
 749 019a DA80      		ldd r13,Y+2
 750 019c 00C0      		rjmp .L33
 751               	.LVL60:
 752               	.L29:
 117:collision.c   **** 	} else if(intersectX >= x2){
 753               		.loc 1 117 0
 754 019e 9701      		movw r18,r14
 755 01a0 A801      		movw r20,r16
 756 01a2 C601      		movw r24,r12
 757 01a4 B501      		movw r22,r10
 758 01a6 0E94 0000 		call __gesf2
 759               	.LVL61:
 760 01aa 87FD      		sbrc r24,7
 761 01ac 00C0      		rjmp .L30
 118:collision.c   **** 		return circularCollision(circlex, circley, radius, x2, y2, 0);
 762               		.loc 1 118 0
 763 01ae 1F92      		push __zero_reg__
 764 01b0 1F92      		push __zero_reg__
 765 01b2 1F92      		push __zero_reg__
 766 01b4 1F92      		push __zero_reg__
 767 01b6 BA85      		ldd r27,Y+10
 768 01b8 BF93      		push r27
 769 01ba 2985      		ldd r18,Y+9
 770 01bc 2F93      		push r18
 771 01be 3885      		ldd r19,Y+8
 772 01c0 3F93      		push r19
 773 01c2 4F81      		ldd r20,Y+7
 774 01c4 4F93      		push r20
 775 01c6 5701      		movw r10,r14
 776               	.LVL62:
 777 01c8 6801      		movw r12,r16
 778 01ca 00C0      		rjmp .L33
 779               	.LVL63:
 780               	.L30:
 119:collision.c   **** 	} else {
 120:collision.c   **** 		return circularCollision(circlex, circley, radius, intersectX, intersectY, 0);
 781               		.loc 1 120 0
 782 01cc 1F92      		push __zero_reg__
 783 01ce 1F92      		push __zero_reg__
 784 01d0 1F92      		push __zero_reg__
 785 01d2 1F92      		push __zero_reg__
 113:collision.c   **** 	float intersectY = projectionGradient * intersectX + projectionOffset;
 786               		.loc 1 113 0
 787 01d4 A601      		movw r20,r12
 788 01d6 9501      		movw r18,r10
 789 01d8 C301      		movw r24,r6
 790 01da B201      		movw r22,r4
 791 01dc 0E94 0000 		call __mulsf3
 792               	.LVL64:
 793 01e0 2B85      		ldd r18,Y+11
 794 01e2 3C85      		ldd r19,Y+12
 795 01e4 4D85      		ldd r20,Y+13
 796 01e6 5E85      		ldd r21,Y+14
 797 01e8 0E94 0000 		call __addsf3
 798               	.LVL65:
 799               		.loc 1 120 0
 800 01ec 9F93      		push r25
 801 01ee 8F93      		push r24
 802 01f0 7F93      		push r23
 803 01f2 6F93      		push r22
 804               	.LVL66:
 805               	.L33:
 806 01f4 EFA4      		ldd r14,Y+47
 807 01f6 F8A8      		ldd r15,Y+48
 808 01f8 09A9      		ldd r16,Y+49
 809 01fa 1AA9      		ldd r17,Y+50
 810               	.LVL67:
 811 01fc 2BA5      		ldd r18,Y+43
 812 01fe 3CA5      		ldd r19,Y+44
 813 0200 4DA5      		ldd r20,Y+45
 814 0202 5EA5      		ldd r21,Y+46
 815 0204 6FA1      		ldd r22,Y+39
 816 0206 78A5      		ldd r23,Y+40
 817 0208 89A5      		ldd r24,Y+41
 818 020a 9AA5      		ldd r25,Y+42
 819 020c 0E94 0000 		call circularCollision
 820               	.LVL68:
 821 0210 0FB6      		in __tmp_reg__,__SREG__
 822 0212 F894      		cli
 823 0214 DEBF      		out __SP_H__,r29
 824 0216 0FBE      		out __SREG__,__tmp_reg__
 825 0218 CDBF      		out __SP_L__,r28
 826               	/* epilogue start */
 121:collision.c   **** 	}
 122:collision.c   **** }
 827               		.loc 1 122 0
 828 021a 6296      		adiw r28,18
 829 021c 0FB6      		in __tmp_reg__,__SREG__
 830 021e F894      		cli
 831 0220 DEBF      		out __SP_H__,r29
 832 0222 0FBE      		out __SREG__,__tmp_reg__
 833 0224 CDBF      		out __SP_L__,r28
 834 0226 DF91      		pop r29
 835 0228 CF91      		pop r28
 836 022a 1F91      		pop r17
 837 022c 0F91      		pop r16
 838 022e FF90      		pop r15
 839 0230 EF90      		pop r14
 840 0232 DF90      		pop r13
 841 0234 CF90      		pop r12
 842 0236 BF90      		pop r11
 843 0238 AF90      		pop r10
 844 023a 9F90      		pop r9
 845 023c 8F90      		pop r8
 846               	.LVL69:
 847 023e 7F90      		pop r7
 848 0240 6F90      		pop r6
 849 0242 5F90      		pop r5
 850 0244 4F90      		pop r4
 851               	.LVL70:
 852 0246 3F90      		pop r3
 853               	.LVL71:
 854 0248 2F90      		pop r2
 855 024a 0895      		ret
 856               		.cfi_endproc
 857               	.LFE7:
 859               		.section	.text.circularRectCollision,"ax",@progbits
 860               	.global	circularRectCollision
 862               	circularRectCollision:
 863               	.LFB6:
  75:collision.c   **** bool circularRectCollision(float x1, float y1, float rad1, float x2, float y2, int w2, int h2){
 864               		.loc 1 75 0
 865               		.cfi_startproc
 866               	.LVL72:
 867 0000 2F92      		push r2
 868               	.LCFI54:
 869               		.cfi_def_cfa_offset 3
 870               		.cfi_offset 2, -2
 871 0002 3F92      		push r3
 872               	.LCFI55:
 873               		.cfi_def_cfa_offset 4
 874               		.cfi_offset 3, -3
 875 0004 4F92      		push r4
 876               	.LCFI56:
 877               		.cfi_def_cfa_offset 5
 878               		.cfi_offset 4, -4
 879 0006 5F92      		push r5
 880               	.LCFI57:
 881               		.cfi_def_cfa_offset 6
 882               		.cfi_offset 5, -5
 883 0008 6F92      		push r6
 884               	.LCFI58:
 885               		.cfi_def_cfa_offset 7
 886               		.cfi_offset 6, -6
 887 000a 7F92      		push r7
 888               	.LCFI59:
 889               		.cfi_def_cfa_offset 8
 890               		.cfi_offset 7, -7
 891 000c 8F92      		push r8
 892               	.LCFI60:
 893               		.cfi_def_cfa_offset 9
 894               		.cfi_offset 8, -8
 895 000e 9F92      		push r9
 896               	.LCFI61:
 897               		.cfi_def_cfa_offset 10
 898               		.cfi_offset 9, -9
 899 0010 AF92      		push r10
 900               	.LCFI62:
 901               		.cfi_def_cfa_offset 11
 902               		.cfi_offset 10, -10
 903 0012 BF92      		push r11
 904               	.LCFI63:
 905               		.cfi_def_cfa_offset 12
 906               		.cfi_offset 11, -11
 907 0014 CF92      		push r12
 908               	.LCFI64:
 909               		.cfi_def_cfa_offset 13
 910               		.cfi_offset 12, -12
 911 0016 DF92      		push r13
 912               	.LCFI65:
 913               		.cfi_def_cfa_offset 14
 914               		.cfi_offset 13, -13
 915 0018 EF92      		push r14
 916               	.LCFI66:
 917               		.cfi_def_cfa_offset 15
 918               		.cfi_offset 14, -14
 919 001a FF92      		push r15
 920               	.LCFI67:
 921               		.cfi_def_cfa_offset 16
 922               		.cfi_offset 15, -15
 923 001c 0F93      		push r16
 924               	.LCFI68:
 925               		.cfi_def_cfa_offset 17
 926               		.cfi_offset 16, -16
 927 001e 1F93      		push r17
 928               	.LCFI69:
 929               		.cfi_def_cfa_offset 18
 930               		.cfi_offset 17, -17
 931 0020 CF93      		push r28
 932               	.LCFI70:
 933               		.cfi_def_cfa_offset 19
 934               		.cfi_offset 28, -18
 935 0022 DF93      		push r29
 936               	.LCFI71:
 937               		.cfi_def_cfa_offset 20
 938               		.cfi_offset 29, -19
 939 0024 CDB7      		in r28,__SP_L__
 940 0026 DEB7      		in r29,__SP_H__
 941               	.LCFI72:
 942               		.cfi_def_cfa_register 28
 943 0028 6097      		sbiw r28,16
 944               	.LCFI73:
 945               		.cfi_def_cfa_offset 36
 946 002a 0FB6      		in __tmp_reg__,__SREG__
 947 002c F894      		cli
 948 002e DEBF      		out __SP_H__,r29
 949 0030 0FBE      		out __SREG__,__tmp_reg__
 950 0032 CDBF      		out __SP_L__,r28
 951               	/* prologue: function */
 952               	/* frame size = 16 */
 953               	/* stack size = 34 */
 954               	.L__stack_usage = 34
 955 0034 6D83      		std Y+5,r22
 956 0036 7E83      		std Y+6,r23
 957 0038 8F83      		std Y+7,r24
 958 003a 9887      		std Y+8,r25
 959 003c 2987      		std Y+9,r18
 960 003e 3A87      		std Y+10,r19
 961 0040 4B87      		std Y+11,r20
 962 0042 5C87      		std Y+12,r21
 963 0044 1701      		movw r2,r14
 964 0046 4801      		movw r8,r16
 965 0048 2501      		movw r4,r10
 966 004a 3601      		movw r6,r12
  78:collision.c   **** 	if(circularCollision(x1, y1, rad1, x2 + w2, y2 + h2, 0)){
 967               		.loc 1 78 0
 968 004c 6BA5      		ldd r22,Y+43
 969 004e 7CA5      		ldd r23,Y+44
 970               	.LVL73:
 971 0050 8827      		clr r24
 972 0052 77FD      		sbrc r23,7
 973 0054 8095      		com r24
 974 0056 982F      		mov r25,r24
 975 0058 0E94 0000 		call __floatsisf
 976               	.LVL74:
 977 005c 9B01      		movw r18,r22
 978 005e AC01      		movw r20,r24
 979 0060 6DA1      		ldd r22,Y+37
 980 0062 7EA1      		ldd r23,Y+38
 981 0064 8FA1      		ldd r24,Y+39
 982 0066 98A5      		ldd r25,Y+40
 983 0068 0E94 0000 		call __addsf3
 984               	.LVL75:
 985 006c 6D87      		std Y+13,r22
 986 006e 7E87      		std Y+14,r23
 987 0070 8F87      		std Y+15,r24
 988 0072 988B      		std Y+16,r25
 989 0074 69A5      		ldd r22,Y+41
 990 0076 7AA5      		ldd r23,Y+42
 991 0078 8827      		clr r24
 992 007a 77FD      		sbrc r23,7
 993 007c 8095      		com r24
 994 007e 982F      		mov r25,r24
 995 0080 0E94 0000 		call __floatsisf
 996               	.LVL76:
 997 0084 9B01      		movw r18,r22
 998 0086 AC01      		movw r20,r24
 999 0088 C601      		movw r24,r12
 1000 008a B501      		movw r22,r10
 1001 008c 0E94 0000 		call __addsf3
 1002               	.LVL77:
 1003 0090 6983      		std Y+1,r22
 1004 0092 7A83      		std Y+2,r23
 1005 0094 8B83      		std Y+3,r24
 1006 0096 9C83      		std Y+4,r25
 1007 0098 1F92      		push __zero_reg__
 1008 009a 1F92      		push __zero_reg__
 1009 009c 1F92      		push __zero_reg__
 1010 009e 1F92      		push __zero_reg__
 1011 00a0 2889      		ldd r18,Y+16
 1012 00a2 2F93      		push r18
 1013 00a4 3F85      		ldd r19,Y+15
 1014 00a6 3F93      		push r19
 1015 00a8 8E85      		ldd r24,Y+14
 1016 00aa 8F93      		push r24
 1017 00ac 9D85      		ldd r25,Y+13
 1018 00ae 9F93      		push r25
 1019 00b0 A980      		ldd r10,Y+1
 1020 00b2 BA80      		ldd r11,Y+2
 1021 00b4 CB80      		ldd r12,Y+3
 1022 00b6 DC80      		ldd r13,Y+4
 1023               	.LVL78:
 1024 00b8 F32C      		mov r15,r3
 1025 00ba 192D      		mov r17,r9
 1026 00bc 7985      		ldd r23,Y+9
 1027 00be 6A85      		ldd r22,Y+10
 1028 00c0 9B85      		ldd r25,Y+11
 1029 00c2 8C85      		ldd r24,Y+12
 1030 00c4 272F      		mov r18,r23
 1031 00c6 362F      		mov r19,r22
 1032 00c8 492F      		mov r20,r25
 1033 00ca 582F      		mov r21,r24
 1034 00cc BD81      		ldd r27,Y+5
 1035 00ce AE81      		ldd r26,Y+6
 1036 00d0 FF81      		ldd r31,Y+7
 1037 00d2 E885      		ldd r30,Y+8
 1038 00d4 6B2F      		mov r22,r27
 1039 00d6 7A2F      		mov r23,r26
 1040 00d8 8F2F      		mov r24,r31
 1041 00da 9E2F      		mov r25,r30
 1042 00dc 0E94 0000 		call circularCollision
 1043               	.LVL79:
 1044 00e0 0FB6      		in __tmp_reg__,__SREG__
 1045 00e2 F894      		cli
 1046 00e4 DEBF      		out __SP_H__,r29
 1047 00e6 0FBE      		out __SREG__,__tmp_reg__
 1048 00e8 CDBF      		out __SP_L__,r28
 1049 00ea 8111      		cpse r24,__zero_reg__
 1050 00ec 00C0      		rjmp .L38
  83:collision.c   **** 		return lineIntersectingCircle(x2, y2, x2 + w2, y2, x1, y1, rad1)
 1051               		.loc 1 83 0
 1052 00ee 9F92      		push r9
 1053 00f0 8F92      		push r8
 1054 00f2 3F92      		push r3
 1055 00f4 2F92      		push r2
 1056 00f6 BC85      		ldd r27,Y+12
 1057 00f8 BF93      		push r27
 1058 00fa 2B85      		ldd r18,Y+11
 1059 00fc 2F93      		push r18
 1060 00fe 3A85      		ldd r19,Y+10
 1061 0100 3F93      		push r19
 1062 0102 8985      		ldd r24,Y+9
 1063 0104 8F93      		push r24
 1064 0106 9885      		ldd r25,Y+8
 1065 0108 9F93      		push r25
 1066 010a AF81      		ldd r26,Y+7
 1067 010c AF93      		push r26
 1068 010e BE81      		ldd r27,Y+6
 1069 0110 BF93      		push r27
 1070 0112 2D81      		ldd r18,Y+5
 1071 0114 2F93      		push r18
 1072 0116 ADA0      		ldd r10,Y+37
 1073 0118 BEA0      		ldd r11,Y+38
 1074 011a CFA0      		ldd r12,Y+39
 1075 011c D8A4      		ldd r13,Y+40
 1076 011e E980      		ldd r14,Y+1
 1077 0120 FA80      		ldd r15,Y+2
 1078 0122 0B81      		ldd r16,Y+3
 1079 0124 1C81      		ldd r17,Y+4
 1080               	.LVL80:
 1081 0126 A601      		movw r20,r12
 1082 0128 9501      		movw r18,r10
 1083 012a C301      		movw r24,r6
 1084 012c B201      		movw r22,r4
 1085 012e 0E94 0000 		call lineIntersectingCircle
 1086               	.LVL81:
 1087 0132 0FB6      		in __tmp_reg__,__SREG__
 1088 0134 F894      		cli
 1089 0136 DEBF      		out __SP_H__,r29
 1090 0138 0FBE      		out __SREG__,__tmp_reg__
 1091 013a CDBF      		out __SP_L__,r28
  86:collision.c   **** 			|| lineIntersectingCircle(x2, y2 + h2, x2 + w2, y2 + h2, x1, y1, rad1);
 1092               		.loc 1 86 0
 1093 013c 8111      		cpse r24,__zero_reg__
 1094 013e 00C0      		rjmp .L38
  84:collision.c   **** 			|| lineIntersectingCircle(x2 + w2, y2, x2 + w2, y2 + h2, x1, y1, rad1)
 1095               		.loc 1 84 0
 1096 0140 9F92      		push r9
 1097 0142 8F92      		push r8
 1098 0144 3F92      		push r3
 1099 0146 2F92      		push r2
 1100 0148 BC85      		ldd r27,Y+12
 1101 014a BF93      		push r27
 1102 014c 2B85      		ldd r18,Y+11
 1103 014e 2F93      		push r18
 1104 0150 3A85      		ldd r19,Y+10
 1105 0152 3F93      		push r19
 1106 0154 8985      		ldd r24,Y+9
 1107 0156 8F93      		push r24
 1108 0158 9885      		ldd r25,Y+8
 1109 015a 9F93      		push r25
 1110 015c AF81      		ldd r26,Y+7
 1111 015e AF93      		push r26
 1112 0160 BE81      		ldd r27,Y+6
 1113 0162 BF93      		push r27
 1114 0164 2D81      		ldd r18,Y+5
 1115 0166 2F93      		push r18
 1116 0168 3D85      		ldd r19,Y+13
 1117 016a 2E85      		ldd r18,Y+14
 1118 016c 9F85      		ldd r25,Y+15
 1119 016e 8889      		ldd r24,Y+16
 1120 0170 A32E      		mov r10,r19
 1121 0172 B22E      		mov r11,r18
 1122 0174 C92E      		mov r12,r25
 1123 0176 D82E      		mov r13,r24
 1124 0178 E980      		ldd r14,Y+1
 1125 017a FA80      		ldd r15,Y+2
 1126 017c 0B81      		ldd r16,Y+3
 1127 017e 1C81      		ldd r17,Y+4
 1128 0180 2DA1      		ldd r18,Y+37
 1129 0182 3EA1      		ldd r19,Y+38
 1130 0184 4FA1      		ldd r20,Y+39
 1131 0186 58A5      		ldd r21,Y+40
 1132 0188 C801      		movw r24,r16
 1133 018a B701      		movw r22,r14
 1134 018c 0E94 0000 		call lineIntersectingCircle
 1135               	.LVL82:
 1136 0190 0FB6      		in __tmp_reg__,__SREG__
 1137 0192 F894      		cli
 1138 0194 DEBF      		out __SP_H__,r29
 1139 0196 0FBE      		out __SREG__,__tmp_reg__
 1140 0198 CDBF      		out __SP_L__,r28
 1141 019a 8111      		cpse r24,__zero_reg__
 1142 019c 00C0      		rjmp .L38
  85:collision.c   **** 			|| lineIntersectingCircle(x2, y2, x2, y2 + h2, x1, y1, rad1)
 1143               		.loc 1 85 0
 1144 019e 9F92      		push r9
 1145 01a0 8F92      		push r8
 1146 01a2 3F92      		push r3
 1147 01a4 2F92      		push r2
 1148 01a6 BC85      		ldd r27,Y+12
 1149 01a8 BF93      		push r27
 1150 01aa 2B85      		ldd r18,Y+11
 1151 01ac 2F93      		push r18
 1152 01ae 3A85      		ldd r19,Y+10
 1153 01b0 3F93      		push r19
 1154 01b2 8985      		ldd r24,Y+9
 1155 01b4 8F93      		push r24
 1156 01b6 9885      		ldd r25,Y+8
 1157 01b8 9F93      		push r25
 1158 01ba AF81      		ldd r26,Y+7
 1159 01bc AF93      		push r26
 1160 01be BE81      		ldd r27,Y+6
 1161 01c0 BF93      		push r27
 1162 01c2 2D81      		ldd r18,Y+5
 1163 01c4 2F93      		push r18
 1164 01c6 3D85      		ldd r19,Y+13
 1165 01c8 2E85      		ldd r18,Y+14
 1166 01ca 9F85      		ldd r25,Y+15
 1167 01cc 8889      		ldd r24,Y+16
 1168 01ce A32E      		mov r10,r19
 1169 01d0 B22E      		mov r11,r18
 1170 01d2 C92E      		mov r12,r25
 1171 01d4 D82E      		mov r13,r24
 1172 01d6 8301      		movw r16,r6
 1173 01d8 7201      		movw r14,r4
 1174 01da 2DA1      		ldd r18,Y+37
 1175 01dc 3EA1      		ldd r19,Y+38
 1176 01de 4FA1      		ldd r20,Y+39
 1177 01e0 58A5      		ldd r21,Y+40
 1178 01e2 C301      		movw r24,r6
 1179 01e4 B201      		movw r22,r4
 1180 01e6 0E94 0000 		call lineIntersectingCircle
 1181               	.LVL83:
 1182 01ea 0FB6      		in __tmp_reg__,__SREG__
 1183 01ec F894      		cli
 1184 01ee DEBF      		out __SP_H__,r29
 1185 01f0 0FBE      		out __SREG__,__tmp_reg__
 1186 01f2 CDBF      		out __SP_L__,r28
 1187 01f4 8111      		cpse r24,__zero_reg__
 1188 01f6 00C0      		rjmp .L38
  86:collision.c   **** 			|| lineIntersectingCircle(x2, y2 + h2, x2 + w2, y2 + h2, x1, y1, rad1);
 1189               		.loc 1 86 0
 1190 01f8 9F92      		push r9
 1191 01fa 8F92      		push r8
 1192 01fc 3F92      		push r3
 1193 01fe 2F92      		push r2
 1194 0200 BC85      		ldd r27,Y+12
 1195 0202 BF93      		push r27
 1196 0204 2B85      		ldd r18,Y+11
 1197 0206 2F93      		push r18
 1198 0208 3A85      		ldd r19,Y+10
 1199 020a 3F93      		push r19
 1200 020c 8985      		ldd r24,Y+9
 1201 020e 8F93      		push r24
 1202 0210 9885      		ldd r25,Y+8
 1203 0212 9F93      		push r25
 1204 0214 AF81      		ldd r26,Y+7
 1205 0216 AF93      		push r26
 1206 0218 BE81      		ldd r27,Y+6
 1207 021a BF93      		push r27
 1208 021c 2D81      		ldd r18,Y+5
 1209 021e 2F93      		push r18
 1210 0220 3D85      		ldd r19,Y+13
 1211 0222 2E85      		ldd r18,Y+14
 1212 0224 9F85      		ldd r25,Y+15
 1213 0226 8889      		ldd r24,Y+16
 1214 0228 A32E      		mov r10,r19
 1215 022a B22E      		mov r11,r18
 1216 022c C92E      		mov r12,r25
 1217 022e D82E      		mov r13,r24
 1218 0230 E980      		ldd r14,Y+1
 1219 0232 FA80      		ldd r15,Y+2
 1220 0234 0B81      		ldd r16,Y+3
 1221 0236 1C81      		ldd r17,Y+4
 1222 0238 B901      		movw r22,r18
 1223 023a 272F      		mov r18,r23
 1224 023c 362F      		mov r19,r22
 1225 023e 492F      		mov r20,r25
 1226 0240 582F      		mov r21,r24
 1227 0242 C301      		movw r24,r6
 1228 0244 B201      		movw r22,r4
 1229 0246 0E94 0000 		call lineIntersectingCircle
 1230               	.LVL84:
 1231 024a 0FB6      		in __tmp_reg__,__SREG__
 1232 024c F894      		cli
 1233 024e DEBF      		out __SP_H__,r29
 1234 0250 0FBE      		out __SREG__,__tmp_reg__
 1235 0252 CDBF      		out __SP_L__,r28
 1236 0254 91E0      		ldi r25,lo8(1)
 1237 0256 8111      		cpse r24,__zero_reg__
 1238 0258 00C0      		rjmp .L37
 1239 025a 90E0      		ldi r25,0
 1240               	.L37:
 1241 025c 892F      		mov r24,r25
 1242 025e 00C0      		rjmp .L35
 1243               	.L38:
  79:collision.c   **** 		return true;
 1244               		.loc 1 79 0
 1245 0260 81E0      		ldi r24,lo8(1)
 1246               	.L35:
 1247               	/* epilogue start */
  88:collision.c   **** }
 1248               		.loc 1 88 0
 1249 0262 6096      		adiw r28,16
 1250 0264 0FB6      		in __tmp_reg__,__SREG__
 1251 0266 F894      		cli
 1252 0268 DEBF      		out __SP_H__,r29
 1253 026a 0FBE      		out __SREG__,__tmp_reg__
 1254 026c CDBF      		out __SP_L__,r28
 1255 026e DF91      		pop r29
 1256 0270 CF91      		pop r28
 1257 0272 1F91      		pop r17
 1258 0274 0F91      		pop r16
 1259 0276 FF90      		pop r15
 1260 0278 EF90      		pop r14
 1261 027a DF90      		pop r13
 1262 027c CF90      		pop r12
 1263 027e BF90      		pop r11
 1264 0280 AF90      		pop r10
 1265 0282 9F90      		pop r9
 1266 0284 8F90      		pop r8
 1267 0286 7F90      		pop r7
 1268 0288 6F90      		pop r6
 1269 028a 5F90      		pop r5
 1270 028c 4F90      		pop r4
 1271               	.LVL85:
 1272 028e 3F90      		pop r3
 1273 0290 2F90      		pop r2
 1274 0292 0895      		ret
 1275               		.cfi_endproc
 1276               	.LFE6:
 1278               		.section	.text.objectsColliding,"ax",@progbits
 1279               	.global	objectsColliding
 1281               	objectsColliding:
 1282               	.LFB3:
  30:collision.c   **** bool objectsColliding(bool roundVals, GameObject* obj1, bool sp1Circular, GameObject* obj2, bool sp
 1283               		.loc 1 30 0
 1284               		.cfi_startproc
 1285               	.LVL86:
 1286 0000 2F92      		push r2
 1287               	.LCFI74:
 1288               		.cfi_def_cfa_offset 3
 1289               		.cfi_offset 2, -2
 1290 0002 3F92      		push r3
 1291               	.LCFI75:
 1292               		.cfi_def_cfa_offset 4
 1293               		.cfi_offset 3, -3
 1294 0004 4F92      		push r4
 1295               	.LCFI76:
 1296               		.cfi_def_cfa_offset 5
 1297               		.cfi_offset 4, -4
 1298 0006 5F92      		push r5
 1299               	.LCFI77:
 1300               		.cfi_def_cfa_offset 6
 1301               		.cfi_offset 5, -5
 1302 0008 6F92      		push r6
 1303               	.LCFI78:
 1304               		.cfi_def_cfa_offset 7
 1305               		.cfi_offset 6, -6
 1306 000a 7F92      		push r7
 1307               	.LCFI79:
 1308               		.cfi_def_cfa_offset 8
 1309               		.cfi_offset 7, -7
 1310 000c 8F92      		push r8
 1311               	.LCFI80:
 1312               		.cfi_def_cfa_offset 9
 1313               		.cfi_offset 8, -8
 1314 000e 9F92      		push r9
 1315               	.LCFI81:
 1316               		.cfi_def_cfa_offset 10
 1317               		.cfi_offset 9, -9
 1318 0010 AF92      		push r10
 1319               	.LCFI82:
 1320               		.cfi_def_cfa_offset 11
 1321               		.cfi_offset 10, -10
 1322 0012 BF92      		push r11
 1323               	.LCFI83:
 1324               		.cfi_def_cfa_offset 12
 1325               		.cfi_offset 11, -11
 1326 0014 CF92      		push r12
 1327               	.LCFI84:
 1328               		.cfi_def_cfa_offset 13
 1329               		.cfi_offset 12, -12
 1330 0016 DF92      		push r13
 1331               	.LCFI85:
 1332               		.cfi_def_cfa_offset 14
 1333               		.cfi_offset 13, -13
 1334 0018 EF92      		push r14
 1335               	.LCFI86:
 1336               		.cfi_def_cfa_offset 15
 1337               		.cfi_offset 14, -14
 1338 001a FF92      		push r15
 1339               	.LCFI87:
 1340               		.cfi_def_cfa_offset 16
 1341               		.cfi_offset 15, -15
 1342 001c 0F93      		push r16
 1343               	.LCFI88:
 1344               		.cfi_def_cfa_offset 17
 1345               		.cfi_offset 16, -16
 1346 001e 1F93      		push r17
 1347               	.LCFI89:
 1348               		.cfi_def_cfa_offset 18
 1349               		.cfi_offset 17, -17
 1350 0020 CF93      		push r28
 1351               	.LCFI90:
 1352               		.cfi_def_cfa_offset 19
 1353               		.cfi_offset 28, -18
 1354 0022 DF93      		push r29
 1355               	.LCFI91:
 1356               		.cfi_def_cfa_offset 20
 1357               		.cfi_offset 29, -19
 1358 0024 CDB7      		in r28,__SP_L__
 1359 0026 DEB7      		in r29,__SP_H__
 1360               	.LCFI92:
 1361               		.cfi_def_cfa_register 28
 1362 0028 2C97      		sbiw r28,12
 1363               	.LCFI93:
 1364               		.cfi_def_cfa_offset 32
 1365 002a 0FB6      		in __tmp_reg__,__SREG__
 1366 002c F894      		cli
 1367 002e DEBF      		out __SP_H__,r29
 1368 0030 0FBE      		out __SREG__,__tmp_reg__
 1369 0032 CDBF      		out __SP_L__,r28
 1370               	/* prologue: function */
 1371               	/* frame size = 12 */
 1372               	/* stack size = 30 */
 1373               	.L__stack_usage = 30
 1374 0034 1B01      		movw r2,r22
 1375 0036 E42E      		mov r14,r20
 1376 0038 3A83      		std Y+2,r19
 1377 003a 2983      		std Y+1,r18
  31:collision.c   **** 	float x1 = obj1->sprite->x;
 1378               		.loc 1 31 0
 1379 003c DB01      		movw r26,r22
 1380 003e 0D90      		ld __tmp_reg__,X+
 1381 0040 BC91      		ld r27,X
 1382 0042 A02D      		mov r26,__tmp_reg__
 1383 0044 BA87      		std Y+10,r27
 1384 0046 A987      		std Y+9,r26
 1385 0048 4D90      		ld r4,X+
 1386 004a 5D90      		ld r5,X+
 1387 004c 6D90      		ld r6,X+
 1388 004e 7C90      		ld r7,X
 1389 0050 1397      		sbiw r26,3
 1390               	.LVL87:
  32:collision.c   **** 	float y1 = obj1->sprite->y;
 1391               		.loc 1 32 0
 1392 0052 1496      		adiw r26,4
 1393 0054 2D91      		ld r18,X+
 1394 0056 3D91      		ld r19,X+
 1395 0058 4D91      		ld r20,X+
 1396 005a 5C91      		ld r21,X
 1397 005c 1797      		sbiw r26,4+3
 1398               	.LVL88:
 1399 005e 2D83      		std Y+5,r18
 1400 0060 3E83      		std Y+6,r19
 1401 0062 4F83      		std Y+7,r20
 1402 0064 5887      		std Y+8,r21
 1403               	.LVL89:
  33:collision.c   **** 	float x2 = obj2->sprite->x;
 1404               		.loc 1 33 0
 1405 0066 E981      		ldd r30,Y+1
 1406 0068 FA81      		ldd r31,Y+2
 1407 006a 0190      		ld __tmp_reg__,Z+
 1408 006c F081      		ld r31,Z
 1409 006e E02D      		mov r30,__tmp_reg__
 1410 0070 FC87      		std Y+12,r31
 1411 0072 EB87      		std Y+11,r30
 1412 0074 A080      		ld r10,Z
 1413 0076 B180      		ldd r11,Z+1
 1414 0078 C280      		ldd r12,Z+2
 1415 007a D380      		ldd r13,Z+3
 1416               	.LVL90:
  34:collision.c   **** 	float y2 = obj2->sprite->y;
 1417               		.loc 1 34 0
 1418 007c 8480      		ldd r8,Z+4
 1419 007e 9580      		ldd r9,Z+5
 1420 0080 F680      		ldd r15,Z+6
 1421 0082 1781      		ldd r17,Z+7
 1422               	.LVL91:
  35:collision.c   **** 	if(roundVals){
 1423               		.loc 1 35 0
 1424 0084 8823      		tst r24
 1425 0086 01F0      		breq .L43
  36:collision.c   **** 		x1 = floor(x1 + 0.5);
 1426               		.loc 1 36 0
 1427 0088 20E0      		ldi r18,0
 1428 008a 30E0      		ldi r19,0
 1429 008c 40E0      		ldi r20,0
 1430 008e 5FE3      		ldi r21,lo8(63)
 1431               	.LVL92:
 1432 0090 C301      		movw r24,r6
 1433 0092 B201      		movw r22,r4
 1434               	.LVL93:
 1435 0094 0E94 0000 		call __addsf3
 1436               	.LVL94:
 1437 0098 0E94 0000 		call floor
 1438               	.LVL95:
 1439 009c 2B01      		movw r4,r22
 1440 009e 3C01      		movw r6,r24
 1441               	.LVL96:
  37:collision.c   **** 		y1 = floor(y1 + 0.5);
 1442               		.loc 1 37 0
 1443 00a0 20E0      		ldi r18,0
 1444 00a2 30E0      		ldi r19,0
 1445 00a4 40E0      		ldi r20,0
 1446 00a6 5FE3      		ldi r21,lo8(63)
 1447 00a8 6D81      		ldd r22,Y+5
 1448 00aa 7E81      		ldd r23,Y+6
 1449 00ac 8F81      		ldd r24,Y+7
 1450 00ae 9885      		ldd r25,Y+8
 1451 00b0 0E94 0000 		call __addsf3
 1452               	.LVL97:
 1453 00b4 0E94 0000 		call floor
 1454               	.LVL98:
 1455 00b8 6D83      		std Y+5,r22
 1456 00ba 7E83      		std Y+6,r23
 1457 00bc 8F83      		std Y+7,r24
 1458 00be 9887      		std Y+8,r25
 1459               	.LVL99:
  38:collision.c   **** 		x2 = floor(x2 + 0.5);
 1460               		.loc 1 38 0
 1461 00c0 20E0      		ldi r18,0
 1462 00c2 30E0      		ldi r19,0
 1463 00c4 40E0      		ldi r20,0
 1464 00c6 5FE3      		ldi r21,lo8(63)
 1465 00c8 C601      		movw r24,r12
 1466 00ca B501      		movw r22,r10
 1467               	.LVL100:
 1468 00cc 0E94 0000 		call __addsf3
 1469               	.LVL101:
 1470 00d0 0E94 0000 		call floor
 1471               	.LVL102:
 1472 00d4 5B01      		movw r10,r22
 1473 00d6 6C01      		movw r12,r24
 1474               	.LVL103:
  39:collision.c   **** 		y2 = floor(y2 + 0.5);
 1475               		.loc 1 39 0
 1476 00d8 20E0      		ldi r18,0
 1477 00da 30E0      		ldi r19,0
 1478 00dc 40E0      		ldi r20,0
 1479 00de 5FE3      		ldi r21,lo8(63)
 1480 00e0 AF2D      		mov r26,r15
 1481 00e2 B12F      		mov r27,r17
 1482 00e4 682D      		mov r22,r8
 1483 00e6 792D      		mov r23,r9
 1484 00e8 CD01      		movw r24,r26
 1485 00ea 0E94 0000 		call __addsf3
 1486               	.LVL104:
 1487 00ee 0E94 0000 		call floor
 1488               	.LVL105:
 1489 00f2 4B01      		movw r8,r22
 1490               	.LVL106:
 1491 00f4 F82E      		mov r15,r24
 1492 00f6 192F      		mov r17,r25
 1493               	.LVL107:
 1494               	.L43:
  42:collision.c   **** 	if(sp1Circular && sp2Circular){
 1495               		.loc 1 42 0
 1496 00f8 EE20      		tst r14
 1497 00fa 01F0      		breq .L58
  42:collision.c   **** 	if(sp1Circular && sp2Circular){
 1498               		.loc 1 42 0 is_stmt 0 discriminator 1
 1499 00fc 0023      		tst r16
 1500 00fe 01F4      		brne .+2
 1501 0100 00C0      		rjmp .L49
  43:collision.c   **** 		return circularCollision(x1, y1, obj1->sprite->width / 2.0f, x2, y2, obj2->sprite->width / 2.0f);
 1502               		.loc 1 43 0 is_stmt 1
 1503 0102 A985      		ldd r26,Y+9
 1504 0104 BA85      		ldd r27,Y+10
 1505 0106 5096      		adiw r26,16
 1506 0108 6C91      		ld r22,X
 1507 010a 70E0      		ldi r23,0
 1508 010c 80E0      		ldi r24,0
 1509 010e 90E0      		ldi r25,0
 1510 0110 0E94 0000 		call __floatsisf
 1511               	.LVL108:
 1512 0114 20E0      		ldi r18,0
 1513 0116 30E0      		ldi r19,0
 1514 0118 40E0      		ldi r20,0
 1515 011a 5FE3      		ldi r21,lo8(63)
 1516 011c 0E94 0000 		call __mulsf3
 1517               	.LVL109:
 1518 0120 6983      		std Y+1,r22
 1519 0122 7A83      		std Y+2,r23
 1520 0124 8B83      		std Y+3,r24
 1521 0126 9C83      		std Y+4,r25
 1522               	.LVL110:
 1523 0128 EB85      		ldd r30,Y+11
 1524 012a FC85      		ldd r31,Y+12
 1525 012c 6089      		ldd r22,Z+16
 1526 012e 70E0      		ldi r23,0
 1527 0130 80E0      		ldi r24,0
 1528 0132 90E0      		ldi r25,0
 1529 0134 0E94 0000 		call __floatsisf
 1530               	.LVL111:
 1531 0138 20E0      		ldi r18,0
 1532 013a 30E0      		ldi r19,0
 1533 013c 40E0      		ldi r20,0
 1534 013e 5FE3      		ldi r21,lo8(63)
 1535 0140 0E94 0000 		call __mulsf3
 1536               	.LVL112:
 1537 0144 9F93      		push r25
 1538 0146 8F93      		push r24
 1539 0148 7F93      		push r23
 1540 014a 6F93      		push r22
 1541 014c 1F93      		push r17
 1542 014e FF92      		push r15
 1543 0150 9F92      		push r9
 1544 0152 8F92      		push r8
 1545 0154 E980      		ldd r14,Y+1
 1546 0156 FA80      		ldd r15,Y+2
 1547 0158 0B81      		ldd r16,Y+3
 1548 015a 1C81      		ldd r17,Y+4
 1549               	.LVL113:
 1550 015c 2D81      		ldd r18,Y+5
 1551 015e 3E81      		ldd r19,Y+6
 1552 0160 4F81      		ldd r20,Y+7
 1553 0162 5885      		ldd r21,Y+8
 1554 0164 C301      		movw r24,r6
 1555 0166 B201      		movw r22,r4
 1556 0168 0E94 0000 		call circularCollision
 1557               	.LVL114:
 1558 016c 00C0      		rjmp .L67
 1559               	.LVL115:
 1560               	.L58:
  46:collision.c   **** 	else if(!sp1Circular & !sp2Circular){
 1561               		.loc 1 46 0
 1562 016e 0111      		cpse r16,__zero_reg__
 1563 0170 00C0      		rjmp .L66
  47:collision.c   **** 		return rectangularCollision(x1, y1, obj1->sprite->width, obj1->sprite->height,
 1564               		.loc 1 47 0
 1565 0172 A985      		ldd r26,Y+9
 1566 0174 BA85      		ldd r27,Y+10
 1567 0176 5196      		adiw r26,17
 1568 0178 2C91      		ld r18,X
 1569 017a 5197      		sbiw r26,17
 1570 017c 30E0      		ldi r19,0
 1571 017e 5096      		adiw r26,16
 1572 0180 8C91      		ld r24,X
 1573 0182 90E0      		ldi r25,0
 1574 0184 EB85      		ldd r30,Y+11
 1575 0186 FC85      		ldd r31,Y+12
 1576 0188 4189      		ldd r20,Z+17
 1577 018a 1F92      		push __zero_reg__
 1578 018c 4F93      		push r20
 1579 018e 4089      		ldd r20,Z+16
 1580 0190 1F92      		push __zero_reg__
 1581 0192 4F93      		push r20
 1582 0194 1F93      		push r17
 1583 0196 FF92      		push r15
 1584 0198 9F92      		push r9
 1585 019a 8F92      		push r8
 1586 019c 7901      		movw r14,r18
 1587               	.LVL116:
 1588 019e 8C01      		movw r16,r24
 1589               	.LVL117:
 1590 01a0 2D81      		ldd r18,Y+5
 1591 01a2 3E81      		ldd r19,Y+6
 1592 01a4 4F81      		ldd r20,Y+7
 1593 01a6 5885      		ldd r21,Y+8
 1594 01a8 C301      		movw r24,r6
 1595 01aa B201      		movw r22,r4
 1596 01ac 0E94 0000 		call rectangularCollision
 1597               	.LVL118:
 1598 01b0 00C0      		rjmp .L67
 1599               	.LVL119:
 1600               	.L66:
 1601 01b2 922D      		mov r25,r2
 1602 01b4 832D      		mov r24,r3
 1603               	.LBB4:
  56:collision.c   **** 			obj1 = swapTemp;
 1604               		.loc 1 56 0
 1605 01b6 2980      		ldd r2,Y+1
 1606 01b8 3A80      		ldd r3,Y+2
 1607               	.LVL120:
  55:collision.c   **** 			obj2 = obj1;
 1608               		.loc 1 55 0
 1609 01ba 9983      		std Y+1,r25
 1610               	.LVL121:
 1611 01bc 8A83      		std Y+2,r24
 1612               	.L49:
 1613               	.LVL122:
 1614               	.LBE4:
  60:collision.c   **** 									 x2, y2, obj2->sprite->width, obj2->sprite->height);
 1615               		.loc 1 60 0
 1616 01be A981      		ldd r26,Y+1
 1617 01c0 BA81      		ldd r27,Y+2
 1618 01c2 0D90      		ld __tmp_reg__,X+
 1619 01c4 BC91      		ld r27,X
 1620 01c6 A02D      		mov r26,__tmp_reg__
 1621 01c8 BA83      		std Y+2,r27
 1622 01ca A983      		std Y+1,r26
 1623               	.LVL123:
  59:collision.c   **** 		return circularRectCollision(x1, y1, obj1->sprite->width / 2.0f, 
 1624               		.loc 1 59 0
 1625 01cc D101      		movw r26,r2
 1626 01ce ED91      		ld r30,X+
 1627 01d0 FC91      		ld r31,X
 1628 01d2 6089      		ldd r22,Z+16
 1629 01d4 70E0      		ldi r23,0
 1630 01d6 80E0      		ldi r24,0
 1631 01d8 90E0      		ldi r25,0
 1632 01da 0E94 0000 		call __floatsisf
 1633               	.LVL124:
 1634 01de 20E0      		ldi r18,0
 1635 01e0 30E0      		ldi r19,0
 1636 01e2 40E0      		ldi r20,0
 1637 01e4 5FE3      		ldi r21,lo8(63)
 1638 01e6 0E94 0000 		call __mulsf3
 1639               	.LVL125:
 1640 01ea E981      		ldd r30,Y+1
 1641 01ec FA81      		ldd r31,Y+2
 1642 01ee 2189      		ldd r18,Z+17
 1643 01f0 1F92      		push __zero_reg__
 1644 01f2 2F93      		push r18
 1645 01f4 2089      		ldd r18,Z+16
 1646 01f6 1F92      		push __zero_reg__
 1647 01f8 2F93      		push r18
 1648 01fa 1F93      		push r17
 1649 01fc FF92      		push r15
 1650 01fe 9F92      		push r9
 1651 0200 8F92      		push r8
 1652 0202 7B01      		movw r14,r22
 1653 0204 8C01      		movw r16,r24
 1654               	.LVL126:
 1655 0206 2D81      		ldd r18,Y+5
 1656 0208 3E81      		ldd r19,Y+6
 1657 020a 4F81      		ldd r20,Y+7
 1658 020c 5885      		ldd r21,Y+8
 1659 020e C301      		movw r24,r6
 1660 0210 B201      		movw r22,r4
 1661 0212 0E94 0000 		call circularRectCollision
 1662               	.LVL127:
 1663               	.L67:
 1664 0216 0FB6      		in __tmp_reg__,__SREG__
 1665 0218 F894      		cli
 1666 021a DEBF      		out __SP_H__,r29
 1667 021c 0FBE      		out __SREG__,__tmp_reg__
 1668 021e CDBF      		out __SP_L__,r28
 1669               	/* epilogue start */
  62:collision.c   **** }
 1670               		.loc 1 62 0
 1671 0220 2C96      		adiw r28,12
 1672 0222 0FB6      		in __tmp_reg__,__SREG__
 1673 0224 F894      		cli
 1674 0226 DEBF      		out __SP_H__,r29
 1675 0228 0FBE      		out __SREG__,__tmp_reg__
 1676 022a CDBF      		out __SP_L__,r28
 1677 022c DF91      		pop r29
 1678 022e CF91      		pop r28
 1679 0230 1F91      		pop r17
 1680               	.LVL128:
 1681 0232 0F91      		pop r16
 1682 0234 FF90      		pop r15
 1683 0236 EF90      		pop r14
 1684 0238 DF90      		pop r13
 1685 023a CF90      		pop r12
 1686 023c BF90      		pop r11
 1687 023e AF90      		pop r10
 1688               	.LVL129:
 1689 0240 9F90      		pop r9
 1690 0242 8F90      		pop r8
 1691 0244 7F90      		pop r7
 1692 0246 6F90      		pop r6
 1693 0248 5F90      		pop r5
 1694 024a 4F90      		pop r4
 1695               	.LVL130:
 1696 024c 3F90      		pop r3
 1697 024e 2F90      		pop r2
 1698               	.LVL131:
 1699 0250 0895      		ret
 1700               		.cfi_endproc
 1701               	.LFE3:
 1703               		.section	.text.objectCollidingWithType,"ax",@progbits
 1704               	.global	objectCollidingWithType
 1706               	objectCollidingWithType:
 1707               	.LFB2:
  10:collision.c   **** GameObject* objectCollidingWithType(char* type, bool roundVals, GameObject* obj, bool thisObjCircul
 1708               		.loc 1 10 0
 1709               		.cfi_startproc
 1710               	.LVL132:
 1711 0000 BF92      		push r11
 1712               	.LCFI94:
 1713               		.cfi_def_cfa_offset 3
 1714               		.cfi_offset 11, -2
 1715 0002 CF92      		push r12
 1716               	.LCFI95:
 1717               		.cfi_def_cfa_offset 4
 1718               		.cfi_offset 12, -3
 1719 0004 DF92      		push r13
 1720               	.LCFI96:
 1721               		.cfi_def_cfa_offset 5
 1722               		.cfi_offset 13, -4
 1723 0006 EF92      		push r14
 1724               	.LCFI97:
 1725               		.cfi_def_cfa_offset 6
 1726               		.cfi_offset 14, -5
 1727 0008 FF92      		push r15
 1728               	.LCFI98:
 1729               		.cfi_def_cfa_offset 7
 1730               		.cfi_offset 15, -6
 1731 000a 0F93      		push r16
 1732               	.LCFI99:
 1733               		.cfi_def_cfa_offset 8
 1734               		.cfi_offset 16, -7
 1735 000c 1F93      		push r17
 1736               	.LCFI100:
 1737               		.cfi_def_cfa_offset 9
 1738               		.cfi_offset 17, -8
 1739 000e CF93      		push r28
 1740               	.LCFI101:
 1741               		.cfi_def_cfa_offset 10
 1742               		.cfi_offset 28, -9
 1743 0010 DF93      		push r29
 1744               	.LCFI102:
 1745               		.cfi_def_cfa_offset 11
 1746               		.cfi_offset 29, -10
 1747               	/* prologue: function */
 1748               	/* frame size = 0 */
 1749               	/* stack size = 9 */
 1750               	.L__stack_usage = 9
 1751 0012 6A01      		movw r12,r20
 1752 0014 122F      		mov r17,r18
 1753 0016 B02E      		mov r11,r16
  13:collision.c   **** 	if(game->firstObject != NULL){
 1754               		.loc 1 13 0
 1755 0018 F701      		movw r30,r14
 1756 001a C081      		ld r28,Z
 1757 001c D181      		ldd r29,Z+1
 1758 001e 2097      		sbiw r28,0
 1759 0020 01F0      		breq .L69
 1760               	.LBB5:
  17:collision.c   **** 			if(strcmp(objTesting->type, type)){
 1761               		.loc 1 17 0
 1762 0022 BC01      		movw r22,r24
 1763               	.LVL133:
 1764 0024 8A81      		ldd r24,Y+2
 1765 0026 9B81      		ldd r25,Y+3
 1766               	.LVL134:
 1767 0028 0E94 0000 		call strcmp
 1768               	.LVL135:
 1769 002c 7C01      		movw r14,r24
 1770               	.LVL136:
 1771               	.L71:
 1772 002e E114      		cp r14,__zero_reg__
 1773 0030 F104      		cpc r15,__zero_reg__
 1774 0032 01F0      		breq .L70
  19:collision.c   **** 				if(objectsColliding(true, obj, thisObjCircular, objTesting, objTypeCircular)){
 1775               		.loc 1 19 0
 1776 0034 0B2D      		mov r16,r11
 1777               	.LVL137:
 1778 0036 9E01      		movw r18,r28
 1779 0038 412F      		mov r20,r17
 1780 003a B601      		movw r22,r12
 1781 003c 81E0      		ldi r24,lo8(1)
 1782 003e 0E94 0000 		call objectsColliding
 1783               	.LVL138:
 1784 0042 8111      		cpse r24,__zero_reg__
 1785 0044 00C0      		rjmp .L69
 1786               	.L70:
  23:collision.c   **** 		} while(obj->nextObject != NULL);
 1787               		.loc 1 23 0
 1788 0046 F601      		movw r30,r12
 1789 0048 8485      		ldd r24,Z+12
 1790 004a 9585      		ldd r25,Z+13
 1791 004c 892B      		or r24,r25
 1792 004e 01F4      		brne .L71
 1793               	.LBE5:
  27:collision.c   **** 	return NULL;
 1794               		.loc 1 27 0
 1795 0050 C0E0      		ldi r28,0
 1796 0052 D0E0      		ldi r29,0
 1797               	.L69:
  28:collision.c   **** }
 1798               		.loc 1 28 0
 1799 0054 CE01      		movw r24,r28
 1800               	/* epilogue start */
 1801 0056 DF91      		pop r29
 1802 0058 CF91      		pop r28
 1803 005a 1F91      		pop r17
 1804               	.LVL139:
 1805 005c 0F91      		pop r16
 1806 005e FF90      		pop r15
 1807 0060 EF90      		pop r14
 1808 0062 DF90      		pop r13
 1809 0064 CF90      		pop r12
 1810               	.LVL140:
 1811 0066 BF90      		pop r11
 1812               	.LVL141:
 1813 0068 0895      		ret
 1814               		.cfi_endproc
 1815               	.LFE2:
 1817               		.text
 1818               	.Letext0:
 1819               		.file 2 "./cab202_teensy/sprite.h"
 1820               		.file 3 "/usr/lib/avr/include/stdint.h"
 1821               		.file 4 "pewPewEngine.h"
 1822               		.file 5 "/usr/lib/avr/include/math.h"
 1823               		.file 6 "/usr/lib/avr/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 collision.c
     /tmp/cc0TWO3S.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc0TWO3S.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc0TWO3S.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc0TWO3S.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc0TWO3S.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc0TWO3S.s:17     .text.rectangularCollision:0000000000000000 rectangularCollision
     /tmp/cc0TWO3S.s:253    .text.circularCollision:0000000000000000 circularCollision
     /tmp/cc0TWO3S.s:450    .text.lineIntersectingCircle:0000000000000000 lineIntersectingCircle
     /tmp/cc0TWO3S.s:862    .text.circularRectCollision:0000000000000000 circularRectCollision
     /tmp/cc0TWO3S.s:1281   .text.objectsColliding:0000000000000000 objectsColliding
     /tmp/cc0TWO3S.s:1706   .text.objectCollidingWithType:0000000000000000 objectCollidingWithType

UNDEFINED SYMBOLS
__floatsisf
__addsf3
__subsf3
__gesf2
__mulsf3
__lesf2
__ltsf2
__divsf3
floor
strcmp
